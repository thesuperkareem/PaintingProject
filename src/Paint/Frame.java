package Paint;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Point;
//import java.awt.Shape;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import static java.lang.Math.abs;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JColorChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author BCC
 */
public class Frame extends javax.swing.JFrame {

    Color x = Color.BLACK;
    double X1, X2, Y1, Y2;
    Graphics2D g, gtemp;
    ArrayList<MyShape> shapes = new ArrayList<>();
    MyRectangle myRectangle;

    public Frame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Buttons = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLine = new javax.swing.JToggleButton();
        jRectangle = new javax.swing.JToggleButton();
        jEllipse = new javax.swing.JToggleButton();
        jFill = new javax.swing.JToggleButton();
        jButton1 = new javax.swing.JButton();
        jCircle = new javax.swing.JToggleButton();
        jSquare = new javax.swing.JToggleButton();
        jMove = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanel1MouseDragged(evt);
            }
        });
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel1MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jPanel1MouseReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 975, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 687, Short.MAX_VALUE)
        );

        Buttons.add(jLine);
        jLine.setText("Line");

        Buttons.add(jRectangle);
        jRectangle.setText("Rectangle");

        Buttons.add(jEllipse);
        jEllipse.setText("Ellipse");

        jFill.setText("Fill");

        jButton1.setText("Color");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        Buttons.add(jCircle);
        jCircle.setText("Circle");
        jCircle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCircleActionPerformed(evt);
            }
        });

        Buttons.add(jSquare);
        jSquare.setText("Square");

        Buttons.add(jMove);
        jMove.setText("Move");
        jMove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMoveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jFill, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCircle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jRectangle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLine, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jEllipse, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSquare, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jMove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLine)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRectangle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSquare)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jEllipse)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCircle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jMove)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jFill)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        

    }//GEN-LAST:event_jPanel1MouseClicked

    private void jPanel1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MousePressed
        g = (Graphics2D) jPanel1.getGraphics();
        // gtemp = (Graphics2D) jPanel1.getGraphics();
        X1 = evt.getX();
        Y1 = evt.getY();
        
        
        if (jMove.isSelected()) {
            for (int i = 0; i < shapes.size(); i++) {
                if (shapes.get(i).getType().equals(myRectangle.getType()) && shapes.get(i).contains(X1, Y1)) {
                    
                }
            }

        }
        
    }//GEN-LAST:event_jPanel1MousePressed

    private void jPanel1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseReleased
        X2 = evt.getX();
        Y2 = evt.getY();

        if (jLine.isSelected()) {
            //Line2D a = new Line2D.Double(X1, Y1, X2, Y2);
            MyLine a = new MyLine(X1, Y1, X2, Y2);
            a.setColor(x);
            shapes.add(a);
            draw();
        }
        if (jRectangle.isSelected()) {

            MyRectangle b = new MyRectangle(Math.min(X1, X2), Math.min(Y1, Y2), Math.abs(X2 - X1), Math.abs(Y2 - Y1));
            if (jFill.isSelected()) {
                b.setFill();
            }

            b.setColor(x);
            shapes.add(b);

            draw();
        }
        if (jEllipse.isSelected()) {
            MyEllipse a = new MyEllipse(Math.min(X1, X2), Math.min(Y1, Y2), Math.abs(X2 - X1), Math.abs(Y2 - Y1));
            if (jFill.isSelected()) {
                a.setFill();
            }
            a.setColor(x);
            shapes.add(a);
            draw();

        }
        if (jCircle.isSelected()) {
            MyEllipse a = new MyEllipse(Math.min(X1, X2), Math.min(Y1, Y2), Math.abs(X2 - X1), Math.abs(X2 - X1));
            if (jFill.isSelected()) {
                a.setFill();
            }
            a.setColor(x);
            shapes.add(a);
            draw();

        }
        if (jSquare.isSelected()) {

            MyRectangle b = new MyRectangle(Math.min(X1, X2), Math.min(Y1, Y2), Math.abs(X2 - X1), Math.abs(X2 - X1));
            if (jFill.isSelected()) {
                b.setFill();
            }

            b.setColor(x);
            shapes.add(b);

            draw();
        }
    }//GEN-LAST:event_jPanel1MouseReleased

    private void jPanel1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseDragged

        jPanel1.update(g);
        draw();
        X2 = evt.getX();
        Y2 = evt.getY();

        if (jLine.isSelected()) {
            Line2D a = new Line2D.Double(X1, Y1, X2, Y2);
            g.draw(a);
        }

        if (jRectangle.isSelected()) {
            Rectangle2D b = new Rectangle2D.Double(Math.min(X1, X2), Math.min(Y1, Y2), Math.abs(X2 - X1), Math.abs(Y2 - Y1));
            if (jFill.isSelected()) {
                g.setColor(x);
                g.fill(b);
            } else {
                g.draw(b);
            }
        }

        if (jEllipse.isSelected()) {
            Ellipse2D a = new Ellipse2D.Double(Math.min(X1, X2), Math.min(Y1, Y2), Math.abs(X2 - X1), Math.abs(Y2 - Y1));
            if (jFill.isSelected()) {
                g.setColor(x);
                g.fill(a);
            } else {
                g.draw(a);
            }
        }
        if (jCircle.isSelected()) {
            Ellipse2D a = new Ellipse2D.Double(Math.min(X1, X2), Math.min(Y1, Y2), Math.abs(X2 - X1), Math.abs(X2 - X1));
            if (jFill.isSelected()) {
                g.setColor(x);
                g.fill(a);
            } else {
                g.draw(a);
            }
        }
        if (jSquare.isSelected()) {
            Rectangle2D b = new Rectangle2D.Double(Math.min(X1, X2), Math.min(Y1, Y2), Math.abs(X2 - X1), Math.abs(X2 - X1));
            if (jFill.isSelected()) {
                g.setColor(x);
                g.fill(b);
            } else {
                g.draw(b);
            }
        }
    }//GEN-LAST:event_jPanel1MouseDragged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        x = JColorChooser.showDialog(null, "Pick a Color", Color.BLACK);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jCircleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCircleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCircleActionPerformed

    private void jMoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMoveActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMoveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Frame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup Buttons;
    private javax.swing.JButton jButton1;
    private javax.swing.JToggleButton jCircle;
    private javax.swing.JToggleButton jEllipse;
    private javax.swing.JToggleButton jFill;
    private javax.swing.JToggleButton jLine;
    private javax.swing.JToggleButton jMove;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JToggleButton jRectangle;
    private javax.swing.JToggleButton jSquare;
    // End of variables declaration//GEN-END:variables

    private void draw() {
        for (MyShape shape : shapes) {
            switch (shape.getType()) {
                case ("Line"): {
                    Line2D a = new Line2D.Double(shape.getX1(), shape.getY1(), shape.getX2(), shape.getY2());
                    g.setColor(shape.getColor());
                    g.draw(a);
                    break;
                }
                case ("Rectangle"): {
                    Rectangle2D rectangle2D = new Rectangle2D.Double(shape.getX1(), shape.getY1(), shape.getX2(), shape.getY2());
                    g.setColor(shape.getColor());
                    if (shape.getFill()) {
                        g.fill(rectangle2D);
                        //  g.draw(rectangle2D);
                    } else {
                        g.draw(rectangle2D);
                    }
                    break;
                }
                case ("Ellipse"): {
                    Ellipse2D ellipse2D = new Ellipse2D.Double(shape.getX1(), shape.getY1(), shape.getX2(), shape.getY2());
                    g.setColor(shape.getColor());
                    if (shape.getFill()) {
                        g.fill(ellipse2D);
                    } else {
                        g.draw(ellipse2D);
                    }

                    break;
                }
                case ("Circle"): {
                    Ellipse2D Circle2D = new Ellipse2D.Double(shape.getX1(), shape.getY1(), shape.getX2(), shape.getY2());
                    g.setColor(shape.getColor());
                    if (shape.getFill()) {
                        g.fill(Circle2D);
                    } else {
                        g.draw(Circle2D);
                    }

                    break;
                }
                case ("Square"): {
                    Rectangle2D square2D = new Rectangle2D.Double(shape.getX1(), shape.getY1(), shape.getX2(), shape.getY2());
                    g.setColor(shape.getColor());
                    if (shape.getFill()) {
                        g.fill(square2D);
                        //  g.draw(rectangle2D);
                    } else {
                        g.draw(square2D);
                    }
                    break;
                }
            }
        }
    }
}
